
ToDo:
	-Make controls on ctl3dview moveable
	-Save/Load their positions and visibility as a set

	-Embed the GCode sections in the machine configuration, this way, we can completely manage it and still have the user be able to edit
	it in a controlled way, we can even have a gcode helper functionality in the gui to help users configure thier machines (Eventually).

	-Have the Help menu (sub)item in mainform link to open the UserManual.pdf as well as the HardwareGuide.pdf in the /Docs subdirectory
	-in the slicing configuration screen,
		group icons on the bottom panel so that the on/off visibilty switches of the panels	
	-Make the log view only visible by default in the debug build

	-Support generation improvements
		-make the bottom of the support a cylinder, not a cone
		-hold a reference in each support to the object it touches
		-make supports move and rotate along with object, have them fixed to the ground
		- ability to angle the tip of the support to match the surface normal it intersects
	-Make platform walls light up when objects are not fully enclosed in platform


Hardware objectives:
Use as much standard 3d printing hardware as possible.
A Ramps / Gen4 board or compatible should be using to control the Z Axis of the device

Ultimately, I want my application to be a replacement for apps such as replicatorG, printerface,etc...

I need to be able to syncronize the GCode Zmovements with the display of the slices on the secondary monitor
How can I do this?
	1) one possible method -
	The GCode file must be generated to contain special comments between z movements
	The comments can trigger the display of a slice
		cons - can only be built from host computer - not run from machine - this shouldn't be much of an issue, because
		the image slices need to be sent from the machine anyway	
	2) The z axis and slices are syncronized by time only
		cons - this could quickly get out of sync, problems with pause

		Slice file
			A slice file represents a model that has been sliced and is ready to be printed.
				It may contain the vectors on a per slice basic. In this configuration each vector would have to be rendered
				at run time with the build configuration. The build configuration specifies items that are specific to the machine being buil on
				such as x/y platform size, monitor resolution, etc.. This might be a good format to exchange between users because it represents a sliced
				file (at a given z resolution), but (hopefully) would not be as large as a series of images.

				A secondary version of the slice file could be compressed 2 color  4 bit or 8 bit RLE compressed images in a single file. This would removed the
				need to transport dozens (or hundreds) of image files for even a moderately sized sliced model. These images would represent
				a sliced and ready to print model for a specific machine. If the X/Y platform size or resolution differed, the model would 
				have to be re-sliced. The advantage of this format is that it is ready to print, and allows for slices to be viewed and examined quickly

				Another approach is not to generate image or vector slices at all, and only generate them at run-time. The model itself could be 
				the only resource needed beyond the slicing and build parameters.*(Well, nice for us, but we should still import/export industry standard formats)


Slicing re-write notes:
slicing is a process
this process consists of steps
each step is done by a slicing module
modules can do things like:
raft
bottom layer
support generators
image pre- and post processors
image exporter
svg exporter
gcode generator

The slicer is what holds the list of these actions
and executes (calls) them in the correct order
each module can save and load it's own parameters
the slicer holds all the intermediate data that each module can operate upon.

This set of configured slicing parameters can be saved as a slicing / building profile

I think this approach will later allow other slicing types, such as for my makerbot or reprap


